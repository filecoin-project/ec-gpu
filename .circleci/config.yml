version: 2.1

executors:
  default:
    machine:
      image: ubuntu-2004-cuda-11.2:202103-01
    working_directory: ~/gpuci
    resource_class: gpu.nvidia.medium

restore-workspace: &restore-workspace
  attach_workspace:
    at: ~/

restore-cache: &restore-cache
  restore_cache:
    keys:
      - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - repo-source-{{ .Branch }}-{{ .Revision }}

commands:
  set-env-path:
    steps:
      - run:
          name: Set the PATH env variable
          command: |
            echo 'export PATH="$HOME:~/.cargo/bin:/usr/local/cuda-11.2/bin:$PATH"' | tee --append $BASH_ENV
            source $BASH_ENV

  install-gpu-deps:
    steps:
      - run:
          name: Install libraries for GPU tests
          command: |
            sudo apt update
            sudo apt install -y ocl-icd-opencl-dev

jobs:

  cargo_fetch:
    executor: default
    steps:
      - checkout
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - set-env-path
      - run: echo $BASH_ENV
      - run: echo $HOME
      - run: cargo --version
      - run: rustc --version
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: cargo update
      - run: cargo fetch
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: rustup component add rustfmt-preview
      - run: rustup component add clippy-preview
      - run: rustc --version
      - run: rm -rf .git
      - persist_to_workspace:
          root: ~/
          paths:
            - gpuci
      - save_cache:
          key: cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - "~/.cargo"
            - "~/.rustup"

  test:
    executor: default
    parameters:
      cargo-args:
        description: Addtional arguments for the cargo command
        type: string
        default: ""
      no-gpu-deps:
        description: If true, don't install OpenCL libraries
        type: boolean
        default: false
    steps:
      - *restore-workspace
      - *restore-cache
      - set-env-path
      - install-gpu-deps
      - run: nvidia-smi --list-gpus
      - run:
          name: Test (<< parameters.cargo-args >>)
          command: cargo test --workspace << parameters.cargo-args >>

  rustfmt:
    executor: default
    steps:
      - *restore-workspace
      - *restore-cache
      - set-env-path
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check

  clippy:
    executor: default
    parameters:
      cargo-args:
        description: Addtional arguments for the cargo command
        type: string
        default: ""
    steps:
      - *restore-workspace
      - *restore-cache
      - set-env-path
      - run:
          name: Run cargo clippy default features
          command: cargo clippy --workspace --all-targets -- -D warnings
      - run:
          name: Run cargo clippy no default features
          command: cargo clippy --workspace --all-targets --no-default-features -- -D warnings
      - run:
          name: Run cargo clippy with cuda feature
          command: cargo clippy --workspace --all-targets --no-default-features --features cuda,fft,multiexp -- -D warnings
      - run:
          name: Run cargo clippy with opencl feature
          command: cargo clippy --workspace --all-targets --no-default-features --features opencl,fft,multiexp -- -D warnings
      - run:
          name: Run cargo clippy with cuda and fft features
          command: cargo clippy --workspace --all-targets --no-default-features --features cuda,fft -- -D warnings
      - run:
          name: Run cargo clippy with cuda and multiexp features
          command: cargo clippy --workspace --all-targets --no-default-features --features cuda,multiexp -- -D warnings
      - run:
          name: Run cargo clippy with opencl and fft features
          command: cargo clippy --workspace --all-targets --no-default-features --features opencl,fft -- -D warnings
      - run:
          name: Run cargo clippy with opencl and multiexp features
          command: cargo clippy --workspace --all-targets --no-default-features --features opencl,multiexp -- -D warnings

  build:
    executor: default
    steps:
      - *restore-workspace
      - *restore-cache
      - set-env-path
      - run:
          name: Run cargo release build
          command: cargo build --workspace --release
  rustdoc:
    executor: default
    environment:
      # Making sure that the documentation can be built without having the NVIDIA toolkit
      # installed.
      DOCS_RS: true
    steps:
      - *restore-workspace
      - *restore-cache
      - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV && source $BASH_ENV
      - run:
          name: Run rustdoc
          command: |
            cargo rustdoc --package ec-gpu --all-features -- -D warnings
            cargo rustdoc --package ec-gpu-gen --all-features -- -D warnings

workflows:
  version: 2.1

  test:
    jobs:
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - test:
          name: "Test with default features"
          no-gpu-deps: true
          requires:
            - cargo_fetch
      - test:
          name: "Test with no default features"
          cargo-args: "--no-default-features"
          no-gpu-deps: true
          requires:
            - cargo_fetch
      - test:
          name: "Test with CUDA only"
          cargo-args: "--no-default-features --features cuda,fft,multiexp"
          requires:
            - cargo_fetch
      - test:
          name: "Test with OpenCL only"
          cargo-args: "--no-default-features --features opencl,fft,multiexp"
          requires:
            - cargo_fetch
      - test:
          name: "Test with FFT on CUDA"
          cargo-args: "--no-default-features --features cuda,fft"
          requires:
            - cargo_fetch
      - test:
          name: "Test with multiexp on CUDA"
          cargo-args: "--no-default-features --features cuda,multiexp"
          requires:
            - cargo_fetch
      - test:
          name: "Test with FFT on OpenCL"
          cargo-args: "--no-default-features --features opencl,fft"
          requires:
            - cargo_fetch
      - test:
          name: "Test with multiexp on OpenCL"
          cargo-args: "--no-default-features --features opencl,multiexp"
          requires:
            - cargo_fetch
      - build:
          requires:
            - cargo_fetch
      - rustdoc:
          requires:
            - cargo_fetch
